version: 2.1

commands:
    destroy-environment:
        description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
        parameters:
            # Add parameter here
            workflow-id:
                type: string
                default: ${CIRCLE_WORKFLOW_ID:0:8}
        steps:
            - run:
                  name: Destroy environments
                  when: on_fail
                  command: |
                      # Your code here
                      aws s3 rb s3://udapeople-<< parameters.workflow-id >> --force  
                      aws cloudformation delete-stack \
                          --stack-name "backend-stack-<< parameters.workflow-id >>"
                      aws cloudformation delete-stack \
                          --stack-name "frontend-stack-<< parameters.workflow-id >>"

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi

    enviroment-variables:
        description: env variables 
        steps:
            - run:
                name: Write to .env file
                command: |
                    ls -la
                    echo ENVIROMENT=development > "backend/.env"
                    echo TYPEORM_CONNECTION=postgres >> "backend/.env"
                    echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
                    echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
                    echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
                    echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
                    echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
                    echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
                    echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
                    echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"

jobs:

# Building Section #####################################################################

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
              cd frontend
              npm i
              npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
                cd backend
                npm i
                npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

# testing Section #######################################################################

  test-frontend:
      docker:
          # Docker image here
          - image: circleci/node:13.8.0
      steps:
          # Checkout code from git
          - checkout
          # Restore from cache
          - restore_cache:
                keys:
                    - frontend-build
          # Your job code here
          - run:
                name: Frontend test
                command: |
                    cd frontend
                    npm install
                    npm build
                    npm run test


  test-backend:
      docker:
          # Docker image here
          - image: circleci/node:13.8.0
      steps:
          # Checkout code from git
          - checkout
          # Restore from cache
          - restore_cache:
                keys:
                    - backend-build
          # Your job code here
          - run:
                name: Backend test
                command: |
                    cd backend
                    npm install
                    npm build
                    npm run test

# Scanning Section #######################################################################

  scan-frontend:
        docker:
            - image: circleci/node:13.8.0
            # Docker image here
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            - restore_cache:
                  keys:
                      - frontend-build
            # Your job code here
            - run:
                  name: Frontend Scan 
                  command: |
                      cd frontend
                      npm audit fix --audit-level=critical --force
                      npm install
                      npm audit --audit-level=critical

  scan-backend:
        docker:
            - image: circleci/node:13.8.0
            # Docker image here
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            - restore_cache:
                  keys:
                      - backend-build
            # Your job code here
            - run:
                  name: Backend Scan 
                  command: |
                      cd backend
                      npm audit fix --audit-level=critical --force
                      npm install
                      npm audit --audit-level=critical

# deploy infra into AWS using Cloud Formation ##########################################################

#   deploy-infrastructure:
#         docker:
#             # Docker image here that supports AWS CLI
#             - image: amazon/aws-cli
#         steps:
#             # Checkout code from git
#             - checkout
#             - run: yum -y install tar gzip
#             - add_ssh_keys:
#                   fingerprints:
#                       - "d1:1d:fe:4c:a7:92:72:1f:97:5f:8b:b0:07:db:f9:09"
#             - run:
#                   name: Ensure back-end infrastructure exists
#                   command: |
#                       aws cloudformation deploy \
#                           --template-file .circleci/files/backend.yml \
#                           --tags project=udapeople \
#                           --stack-name "backend-stack-${CIRCLE_WORKFLOW_ID:0:8}" \
#                           --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:8}
#             - run:
#                   name: Ensure front-end infrastructure exist
#                   command: |
#                       aws cloudformation deploy \
#                           --template-file .circleci/files/frontend.yml \
#                           --tags project=udapeople \
#                           --stack-name "frontend-stack-${CIRCLE_WORKFLOW_ID:0:8}" \
#                           --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:8}
#             - run:
#                   name: Add back-end ip to ansible inventory
#                   command: |
#                       # Your code here
#                       echo "Adding backend ip to inventory"
#                       aws ec2 describe-instances \
#                           --query 'Reservations[*].Instances[*].PublicIpAddress' \
#                           --filters "Name=tag:project,Values=udapeople" \
#                           --output text >> .circleci/ansible/inventory.txt
#                       cat .circleci/ansible/inventory.txt
#             - persist_to_workspace:
#                   root: ~/
#                   paths:
#                       - project/.circleci/ansible/inventory.txt
#             # Here's where you will add some code to rollback on failure
#             # - destroy-environment

# configure the infrastructure that has been deployed into AWS ##############################################################

#   configure-infrastructure:
#         docker:
#             # Docker image here that supports Ansible
#             - image: python:3.7-alpine3.12
#         steps:
#             - checkout
#             # Add ssh keys with fingerprint
#             - add_ssh_keys:
#                     fingerprints:
#                         - "d1:1d:fe:4c:a7:92:72:1f:97:5f:8b:b0:07:db:f9:09"
#             # attach workspace
#             - attach_workspace:
#                     at: ~/
#             - run:
#                     name: Install dependencies
#                     command: |
#                         # Your code here
#                         apk add --update ansible
#                         echo "Ansible inventories >> Requires for the next job"
#                         cat .circleci/ansible/inventory.txt
#             - enviroment-variables
#             - run:
#                     name: Configure server
#                     no_output_timeout: 20m
#                     command: |
#                         ansible-playbook -i .circleci/ansible/inventory.txt \
#                         .circleci/ansible/configure-server.yml
#             # Here's where you will add some code to rollback on failure
#             - run:
#                     name: Install AWS CLI for rollback
#                     when: on_fail
#                     command: |
#                         apk add --update pip 
#                         pip install --upgrade pip 
#                         pip install awscli
#             - destroy-environment



# run the migration #########################################################################################################




  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            pwd
            cd /backend

# send the information out to memstash ##################################################################################################################
                
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully" migrations.txt; then 
              curl -H "Content-Type: text/plain" -H "token:ee7cabe0-f97f-4a0e-9507-89961a8b4c96" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else
              curl -H "Content-Type: text/plain" -H "token:ee7cabe0-f97f-4a0e-9507-89961a8b4c96" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi


     # Here's where you will add some code to rollback on failure      


# deploy the Frontend ################################################################################




#   deploy-frontend:
#         docker:
#         - image: circleci/node:13.8.0
#         steps:
#         - checkout
#         - restore_cache:
#             keys: [frontend-build]
#         - run:
#             name: Install dependencies
#             command: |
#                 sudo apt install python-pip
#                 sudo pip install awscli


###################################################################

#         - run:
#             name: Get backend url
#             command: |
#                 BACKEND_IP=$(curl -H "token: ee7cabe0-f97f-4a0e-9507-89961a8b4c96" --request GET https://api.memstash.io/values/ipaddress)
#                 export API_URL="http://${BACKEND_IP}:3030"
#                 echo "${API_URL}"

# ###################################################################

#         - run:
#             name: Deploy frontend objects
#             command: |
#                 cd frontend
#                 npm i
#                 npm build

#         # Here's where you will add some code to rollback on failure      

###################################################################
        # - run:
        #     name: Get backend url & Deploy frontend objects
        #     command: |
        #         BACKEND_IP=$(curl -H "token: ee7cabe0-f97f-4a0e-9507-89961a8b4c96" --request GET https://api.memstash.io/values/ipaddress)
        #         echo "${BACKEND_IP}"
        #         export API_URL="http://${BACKEND_IP}:3030"
        #         echo "API_URL=$API_URL" >> frontend/.env
        #         echo "${API_URL}"
        #         cd frontend
        #         npm run build
        #         aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:8} --recursive 


######################################################################################







#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
    #   - build-frontend
    #   - build-backend
    #   - test-frontend:
    #       requires: [build-frontend]
    #   - test-backend:
    #       requires: [build-backend]
    #   - scan-backend:
    #       requires: [build-backend]
    #   - scan-frontend:
    #       requires: [build-frontend]
    #   - deploy-infrastructure
        #   requires: [test-frontend, test-backend, scan-frontend, scan-backend]
        #   filters:
        #     branches:
        #       only: [main]
    #   - configure-infrastructure:
    #       requires: [deploy-infrastructure]
      - run-migrations
    #       requires: [configure-infrastructure]
    #   - deploy-frontend:
    #       requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]