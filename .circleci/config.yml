version: 2.1

commands:
  destroy-environment:
    description: Destroy AWS cloudformation stacks
    parameters:
      workflow_id:
        type: string 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-Stack-${CIRCLE_WORKFLOW_ID:0:8}
            aws cloudformation delete-stack --stack-name udapeople-frontend-Stack-${CIRCLE_WORKFLOW_ID:0:8}



#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi
            
jobs:
  # build-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-cache]
  #     - run:
  #         name: FrontEnd Build
  #         command: |
  #           cd ./frontend
  #           npm i
  #           npm run build

  #     - save_cache:
  #         paths: [frontend/node_modules]
  #         key: frontend-cache

  # build-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-cache]
  #     - run:
  #         name: BackEnd Build
  #         command: |
  #           cd ./backend
  #           npm i
  #           npm run build
  #     - save_cache:
  #         paths: [backend/node_modules]
  #         key: backend-cache


  # test-frontend:
  #     docker:
  #       - image: circleci/node:13.8.0
  #     steps:
  #       - checkout
  #       - restore_cache:
  #           keys: [frontend-cache]
  #       - run:
  #           name: Test frontend
  #           command: |
  #             cd ./frontend
  #             sudo npm install oauth-sign
  #             sudo npm run test
                  
  # test-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-cache]
  #     - run:
  #         name: Test backend
  #         command: |
  #           cd ./backend
  #           sudo npm run test

  # scan-frontend:
  #     docker:
  #       - image: circleci/node:13.8.0
  #     steps:
  #       - checkout
  #       - restore_cache:
  #           keys: [frontend-cache]
  #       - run:
  #           name: Scanning Frontend
  #           command: |
  #             cd ./frontend
  #             npm i
  #             npm audit fix --audit-level=critical --force

  # scan-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-cache]
  #     - run:
  #         name: Scaning Backend
  #         command: |
  #           cd ./backend
  #           npm i
  #           npm audit fix --audit-level=critical --force

  deploy-infrastructure:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: install tar 
            command: yum -y install tar 
        - run:
            name: install gzip 
            command: yum -y install gzip           
        - run:
            name: Ensure back-end infrastructure exists
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-Stack-${CIRCLE_WORKFLOW_ID:0:8}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:8}"\
                --tags project="udapeopleBackend_${CIRCLE_WORKFLOW_ID:0:8}"
                
  # #       - run:
  # #           name: Ensure front-end infrastructure exist
  # #           command: |
  # #             aws cloudformation deploy \
  # #               --template-file .circleci/files/frontend.yml \
  # #               --stack-name "udapeople-frontend-Stack-${CIRCLE_WORKFLOW_ID:0:8}" \
  # #               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:8}" \
  # #               --tags project="udapeopleFrontend_${CIRCLE_WORKFLOW_ID:0:8}"

        - run:
            name: Add back-end ip to ansible inventory
            command: |
                aws ec2 describe-instances  --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:8}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> .circleci/ansible/inventory.txt
                cat .circleci/ansible/inventory.txt
        - persist_to_workspace:
              root: ~/
              paths:
                  - project/.circleci/ansible/inventory.txt
          # Here's where you will add some code to rollback on failure
        - destroy-environment:
              workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}


  configure-infrastructure:
      docker:
          - image: python:3.7-alpine3.11
      steps:
          - checkout
          - add_ssh_keys:
                fingerprints:
                    - "d1:1d:fe:4c:a7:92:72:1f:97:5f:8b:b0:07:db:f9:09"
          - attach_workspace:
                at: ~/
          - run:
                name: Install dependencies
                command: |
                    apk add --update ansible
                    pip install awscli
                    pwd
                    cat .circleci/ansible/inventory.txt
          - run:
                name: Configure server
                command: |
                    ansible-playbook -i .circleci/ansible/inventory.txt \
                    .circleci/ansible/configure-server.yml
          # Here's where you will add some code to rollback on failure
          - destroy-environment:
              workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}


  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            touch .env
            echo ENVIROMENT=production > .env
            echo TYPEORM_CONNECTION=postgres >> .env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> .env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            ls -latr
            cat .env
            npm i
            npm install oauth-sign
            npm run migrations > migrationresult.txt

      - run:
          name: Send migration results to memstash
          command: |
            #!/bin/bash
            cd backend
            cat migrationresult.txt
            if [ $(grep -i "has been executed successfully" migrationresult.txt | wc -l) -ge 1 ]
              then 
              curl -H "Content-Type: text/plain" -H "token: ee7cabe0-f97f-4a0e-9507-89961a8b4c96" --request PUT --data "Migration Successful" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:8}
              curl -H "token: ee7cabe0-f97f-4a0e-9507-89961a8b4c96" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
              else
              curl -H "Content-Type: text/plain" -H "token: ee7cabe0-f97f-4a0e-9507-89961a8b4c96" --request PUT --data "Migration Failed" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:8}
              curl -H "token: ee7cabe0-f97f-4a0e-9507-89961a8b4c96" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi


#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure      
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
#       - deploy-frontend:
#           requires: [run-migrations]
#       - deploy-backend:
#           requires: [run-migrations]
#       - smoke-test:
#           requires: [deploy-backend, deploy-frontend]
#       - cloudfront-update:
#           requires: [smoke-test]
#       - cleanup:
#           requires: [cloudfront-update]