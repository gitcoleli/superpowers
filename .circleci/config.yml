version: 2.1

commands:
    destroy-environment:
        description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
        parameters:
            workflow-id:
                type: string
                default: ${CIRCLE_WORKFLOW_ID}
        steps:
            - run:
                  name: Destroy environments
                  when: on_fail
                  command: |
                      # Your code here
                      aws s3 rb s3://udapeople-<< parameters.workflow-id >> --force 
                      aws cloudformation delete-stack \
                          --stack-name "backend-stack-<< parameters.workflow-id >>"
                      aws cloudformation delete-stack \
                          --stack-name "frontend-stack-<< parameters.workflow-id >>"


    enviroment-variables:
        description: env variables 
        steps:
            - run:
                name: Write to .env file
                command: |
                    ls -la
                    echo ENVIROMENT=development > "backend/.env"
                    echo TYPEORM_CONNECTION=postgres >> "backend/.env"
                    echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
                    echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
                    echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
                    echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
                    echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
                    echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
                    echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
                    echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"

    revert-migrations:
        description: Revert the last migration if successfully run in the current workflow.
        steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
                SUCCESS=$(curl -H "token: ee7cabe0-f97f-4a0e-9507-89961a8b4c96" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
                if(( SUCCESS==1 )); 
                then
                cd ~/project/backend
                npm install
                npm run migrations:revert
                fi



jobs:

# ##########################Building Section #################################################################################################

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
              cd frontend
              npm i
              npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
                cd backend
                npm i
                npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

# ################################testing Section #######################################################################

  test-frontend:
      docker:
          # Docker image here
          - image: circleci/node:13.8.0
      steps:
          # Checkout code from git
          - checkout
          # Restore from cache
          - restore_cache:
                keys:
                    - frontend-build
          # Your job code here
          - run:
                name: Frontend test
                command: |
                    cd frontend
                    npm install
                    npm build
                    npm run test


  test-backend:
      docker:
          # Docker image here
          - image: circleci/node:13.8.0
      steps:
          # Checkout code from git
          - checkout
          # Restore from cache
          - restore_cache:
                keys:
                    - backend-build
          # Your job code here
          - run:
                name: Backend test
                command: |
                    cd backend
                    npm install
                    npm build
                    npm run test

# ##################################Scanning Section #######################################################################

  scan-frontend:
        docker:
            - image: circleci/node:13.8.0
            # Docker image here
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            - restore_cache:
                  keys:
                      - frontend-build
            # Your job code here
            - run:
                  name: Frontend Scan 
                  command: |
                      cd frontend
                      npm install
                      npm audit fix --audit-level=critical
                      npm audit --audit-level=critical

  scan-backend:
        docker:
            - image: circleci/node:13.8.0
            # Docker image here
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            - restore_cache:
                  keys:
                      - backend-build
            # Your job code here
            - run:
                  name: Backend Scan 
                  command: |
                      cd backend
                      npm install
                      npm audit fix --audit-level=critical
                      npm audit --audit-level=critical

# ############################deploy infra into AWS using Cloud Formation ##########################################################

  deploy-infrastructure:
        docker:
            # Docker image here that supports AWS CLI
            - image: amazon/aws-cli
        steps:
            # Checkout code from git
            - checkout
            - run: yum -y install tar gzip
            - add_ssh_keys:
                  fingerprints:
                      - "d1:1d:fe:4c:a7:92:72:1f:97:5f:8b:b0:07:db:f9:09"
            # - run:
            #         name: Save current workflow id to memstash
            #         command: |
            #             curl -H "Content-Type: text/plain" -H "token: ee7cabe0-f97f-4a0e-9507-89961a8b4c96" --request PUT --data "${CIRCLE_WORKFLOW_ID}" https://api.memstash.io/values/fruit


            - run:
                  name: Ensure back-end infrastructure exists
                  command: |
                      aws cloudformation deploy --template-file .circleci/files/backend.yml --tags project=udapeople --stack-name "backend-stack-${CIRCLE_WORKFLOW_ID}" --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
            - run:
                  name: Ensure front-end infrastructure exist
                  command: |
                      aws cloudformation deploy --template-file .circleci/files/frontend.yml --tags project=udapeople --stack-name "frontend-stack-${CIRCLE_WORKFLOW_ID}" --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
            # - run:


            - run:
                  name: Add back-end ip 
                  command: |
                      echo "Adding backend ip to inventory and memstash"
                      URLS=$(aws ec2 describe-instances --region us-west-2 --query "Reservations[*].Instances[*].PublicIpAddress"  --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" --output text )
                      echo "$URLS"
                      curl -H "Content-Type: text/plain" -H "token: ee7cabe0-f97f-4a0e-9507-89961a8b4c96" --request PUT --data "$URLS" https://api.memstash.io/values/urls
                      aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filters "Name=tag:project,Values=udapeople" --output text >> .circleci/ansible/inventory.txt
                      cat .circleci/ansible/inventory.txt

            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/.circleci/ansible/inventory.txt
            # Here's where you will add some code to rollback on failure
            - destroy-environment

# #######################configure the infrastructure that has been deployed into AWS ##########################################################################

  configure-infrastructure:
        docker:
            # Docker image here that supports Ansible
            - image: python:3.7-alpine3.12
        steps:
            - checkout
            # Add ssh keys with fingerprint
            - add_ssh_keys:
                    fingerprints:
                        - "d1:1d:fe:4c:a7:92:72:1f:97:5f:8b:b0:07:db:f9:09"
            # attach workspace
            - attach_workspace:
                    at: ~/
            - run:
                    name: Install dependencies
                    command: |
                        apk add --update ansible
                        cat .circleci/ansible/inventory.txt
            - enviroment-variables

            - run:
                    name: Configure server
                    no_output_timeout: 20m
                    command: |
                        ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
            # Here's where you will add some code to rollback on failure
            # - run:
            #         name: Install AWS CLI for rollback
            #         when: on_fail
            #         command: |
            #             apk add --update pip 
            #             pip install --upgrade pip 
            #             pip install awscli
            #             aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filters "Name=tag:project,Values=udapeople" --output text >> .circleci/ansible/inventory.txt
            #             cat .circleci/ansible/inventory.txt
            - destroy-environment



# ###########################run the migration #####################################################################################################################


  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
                # Restore from cache
      - restore_cache:
                keys:
                    - backend-build
      - run:
          name: Run migrations
          command: |
            #!/bin/bash
            cd backend
            echo ENVIROMENT=$ENVIROMENT > ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            npm install
            touch migrations_log.txt
            npm run migrations >> migrations_log.txt
            cat migrations_log.txt


      - run:
          name: is log file there ?
          command: |
            #!/bin/bash
            cd backend
            ls
            cat migrations_log.txt

###############################deploy the Frontend ###############################################################################################

  deploy-frontend:
        docker:
        - image: circleci/node:13.8.0
        steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: Install dependencies
            command: |
                sudo apt install python-pip 
                sudo pip install awscli
        - run:
            name: Get backend url & Deploy frontend objects
            command: |
                aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filters "Name=tag:project,Values=udapeople" --output text >> .circleci/ansible/inventory.txt
                cat .circleci/ansible/inventory.txt
                # export BACKEND_IP=$(sed -n 2p .circleci/ansible/inventory.txt)
                export API_URL="http://$(sed -n 2p .circleci/ansible/inventory.txt):3030"
                echo "API_URL=$API_URL" >> frontend/.env
                echo "${API_URL}"
                cd frontend
                npm run build
                aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID} --recursive 
        - destroy-environment
        - revert-migrations




# ####################deploy backend ##################################################################


  deploy-backend:
        docker:
            - image: python:3.7-alpine3.11
            # Docker image here that supports Ansible
        steps:
            # Checkout code from git
            - checkout
            # Add ssh keys with fingerprint
            - add_ssh_keys:
                  fingerprints:
                      - "d1:1d:fe:4c:a7:92:72:1f:97:5f:8b:b0:07:db:f9:09"
            # attach workspace
            - attach_workspace:
                  at: ~/
            - run:
                  name: Install dependencies
                  command: |
                      # your code here
                      apk add --update tar gzip ansible nodejs npm curl openssh-client
                      pip install awscli
            - restore_cache:
                  keys:
                      - "backend-dist"
            - enviroment-variables

            - run:
                  name: Deploy backend using ansible it takes a while 
                  no_output_timeout: 60m
                  command: |
                      #!/bin/bash
                      pwd
                      cd .circleci/ansible/
                      pwd
                      cat inventory.txt
                      ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory.txt deploy-backend.yml
            - revert-migrations
            - destroy-environment




#########################smoke test #########################################################################



  smoke-test:
        docker:
            # Lightweight Docker image
            - image: python:3.7-alpine3.11
        steps:
            # Checkout code from git
            - checkout
            - add_ssh_keys:
                  fingerprints:
                      - "d1:1d:fe:4c:a7:92:72:1f:97:5f:8b:b0:07:db:f9:09"
            - attach_workspace:
                  at: ~/

            - run:
                  name: Install dependencies
                  command: |
                      # your code here
                      apk add --update tar curl openssh-client
                      pip install awscli

            - run:
                name: Get backend url and smoke test
                no_output_timeout: 30m
                command: |       
                    curl -H "token: ee7cabe0-f97f-4a0e-9507-89961a8b4c96" --request GET https://api.memstash.io/values/urls
                    export BACKEND_URL=$(curl -H "token: ee7cabe0-f97f-4a0e-9507-89961a8b4c96" --request GET https://api.memstash.io/values/urls)
                    echo "${BACKEND_URL}"
                    curl "http://${BACKEND_URL}:3030/api/status"

            - run:
                name: Frontend smoke test.
                command: |
                    URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-west-2.amazonaws.com"
                    if curl -s ${URL} | grep "Welcome"
                    then
                    return 0
                    else
                    return 1
                    fi
            - revert-migrations
            - destroy-environment
#############################################################################################################################






  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            
            export STACKS=$(aws cloudformation list-stacks \
            --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE \
            --no-paginate --output text)
            echo OldWorkflowID: "$OldWorkflowID"
            echo STACKS: "$STACKS" 
            aws cloudformation deploy \
            --template-file /root/project/.circleci/files/cloudfront.yml \
            --stack-name udapeople-cloudfront \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}" \
            --tags project=udapeople
            curl -H "Content-Type: text/plain" -H "token: OldWorkflowID-${CIRCLE_WORKFLOW_ID}" \
            --request PUT \
            --data "$OldWorkflowID" https://api.memstash.io/values/OldWorkflowID

    #   - run: 
    #       name: pushing new id to memstash if needed for testing purposes
    #       command: |
    #         echo ${CIRCLE_WORKFLOW_ID}
    #         curl -H "Content-Type: text/plain" -H "token: ee7cabe0-f97f-4a0e-9507-89961a8b4c96" --request PUT --data "${CIRCLE_WORKFLOW_ID}" https://api.memstash.io/values/fruit --ssl-no-revoke
      
      - revert-migrations
      - destroy-environment 






############################################## clean up ##########################################################################

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run: 
          name: cleaning up the stacks 
          command: |
            export AWS_PAGER=""
            export oldid=$(curl -H "token: ee7cabe0-f97f-4a0e-9507-89961a8b4c96" --request GET https://api.memstash.io/values/fruit ) 
            echo  old id ${oldid}
            echo  new id ${CIRCLE_WORKFLOW_ID}
            ## ## ##
            ## ## ##
            if  [[ ${CIRCLE_WORKFLOW_ID} != "${oldid}" ]]
            then
            aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text
            echo "the ID's are different lets delete"
            aws cloudformation delete-stack --stack-name backend-stack-${oldid}
            aws s3 rm "s3://udapeople-${oldid}" --recursive
            aws cloudformation delete-stack --stack-name frontend-stack-${oldid}
            else 
            echo "#### nothing to do here move on ####"
            fi 



      - run: 
          name: pushing new id to memstash
          command: |
            echo ${CIRCLE_WORKFLOW_ID}
            curl -H "Content-Type: text/plain" -H "token: ee7cabe0-f97f-4a0e-9507-89961a8b4c96" --request PUT --data "${CIRCLE_WORKFLOW_ID}" https://api.memstash.io/values/fruit 




workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [deploy-frontend]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
