version: 2.1

commands:
    destroy-environment:
        description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
        parameters:
            workflow-id:
                type: string
                default: ${CIRCLE_WORKFLOW_ID:0:8}
        steps:
            - run:
                  name: Destroy environments
                  when: on_fail
                  command: |
                      # Your code here
                      aws s3 rb s3://udapeople-<< parameters.workflow-id >> --force  
                      aws cloudformation delete-stack --stack-name "backend-stack-<< parameters.workflow-id >>"
                      aws cloudformation delete-stack --stack-name "frontend-stack-<< parameters.workflow-id >>"

# revert-migrations:
#         description: Revert the last migration if successfully run in the current workflow.
#         # parameters:
#         steps:
#             # Trigger rollback jobs if the smoke tests or any following jobs fail.
#             # Revert the last migration (IF a new migration was applied) on the database to that it goes back to the way it was before. You can use that value you saved in MemStash.io to know if you should revert any migrations.
#             - run:
#                   name: Revert migrations
#                   when: on_fail
#                   command: |
#                       # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#                       export SUCCESS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:8}" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:8})
#                       if(( $SUCCESS==1 )); 
#                       then
#                       cd ~/project/backend
#                       npm install
#                       npm run migrations:revert
#                       fi


jobs:
  # build-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-cache]
  #     - run:
  #         name: FrontEnd Build
  #         command: |
  #           cd ./frontend
  #           npm i
  #           npm run build
  #     - save_cache:
  #         paths: [frontend/node_modules]
  #         key: frontend-cache

  # build-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-cache]
  #     - run:
  #         name: BackEnd Build
  #         command: |
  #           cd ./backend
  #           npm i
  #           npm run build
  #     - save_cache:
  #         paths: [backend/node_modules]
  #         key: backend-cache


  # test-frontend:
  #     docker:
  #       - image: circleci/node:13.8.0
  #     steps:
  #       - checkout
  #       - restore_cache:
  #           keys: [frontend-cache]
  #       - run:
  #           name: Test frontend
  #           command: |
  #             cd ./frontend
  #             npm install oauth-sign
  #             npm i
  #             npm build
  #             npm run test

                  
  # test-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-cache]
  #     - run:
  #         name: Test backend
  #         command: |
  #           cd ./backend
  #           npm i
  #           npm build
  #           npm run test

  # scan-frontend:
  #     docker:
  #       - image: circleci/node:13.8.0
  #     steps:
  #       - checkout
  #       - restore_cache:
  #           keys: [frontend-cache]
  #       - run:
  #           name: Scanning Frontend
  #           command: |
  #             cd ./frontend
  #             npm i
  #             npm audit fix --audit-level=critical --force
  #             npm audit --audit-level=critical

  # scan-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-cache]
  #     - run:
  #         name: Scaning Backend
  #         command: |
  #           cd ./backend
  #           npm i
  #           npm audit fix --audit-level=critical --force
  #           npm audit --audit-level=critical

    deploy-infrastructure:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            - add_ssh_keys:
                  fingerprints:
                      - "d1:1d:fe:4c:a7:92:72:1f:97:5f:8b:b0:07:db:f9:09"

            - run: 
                  name: dependencies
                  command: yum -y install tar gzip
            - run:
                  name: Ensure back-end infrastructure exists
                  command: |
                      aws cloudformation deploy \
                          --template-file .circleci/files/backend.yml \
                          --tags project=udapeople \
                          --stack-name "backend-stack-${CIRCLE_WORKFLOW_ID:0:8}" \
                          --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:8}

            - run:
                  name: Ensure front-end infrastructure exist
                  command: |
                      aws cloudformation deploy \
                          --template-file .circleci/files/frontend.yml \
                          --tags project=udapeople \
                          --stack-name "frontend-stack-${CIRCLE_WORKFLOW_ID:0:8}" \
                          --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:8}
            - run:
                  name: Add back-end ip to ansible inventory
                  command: |
                      # Your code here
                      echo "Adding backend ip to inventory"
                      aws ec2 describe-instances \
                          --query 'Reservations[*].Instances[*].PublicIpAddress' \
                          --filters "Name=tag:project,Values=udapeople" \
                          --output text >> .circleci/ansible/inventory.txt
                      cat .circleci/ansible/inventory.txt
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/.circleci/ansible/inventory.txt
            - destroy-environment


    configure-infrastructure:
        docker:
            # Docker image here that supports Ansible
            - image: python:3.7-alpine3.11
        steps:
            - checkout
            # Add ssh keys with fingerprint
            - add_ssh_keys:
                  fingerprints:
                      - "d1:1d:fe:4c:a7:92:72:1f:97:5f:8b:b0:07:db:f9:09"
            # attach workspace
            - attach_workspace:
                  at: ~/
            - run:
                  name: Install dependencies
                  command: |
                      apk add --update ansible
                      cat .circleci/ansible/inventory.txt
            - run:
                  name: Configure server
                  no_output_timeout: 20m
                  command: |
                      ls -la
                      ansible-playbook -i .circleci/ansible/inventory.txt \
                      .circleci/ansible/configure-server.yml
            - run:
                  name: if needed
                  when: on_fail
                  command: |
                      apk add --update py3-pip
                      pip install --upgrade pip
                      pip install awscli
            - destroy-environment



    run-migrations:
        docker:
        - image: circleci/node:13.8.0
        steps:
        - checkout
        - restore_cache:
            keys: [backend-cache]
        - run:
            name: Run migrations
            working_directory: ./backend
            command: |
                touch .env
                echo ENVIROMENT=production > .env
                echo TYPEORM_CONNECTION=postgres >> .env
                echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> .env
                echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
                echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
                echo TYPEORM_HOST=$TYPEORM_HOST >> .env
                echo TYPEORM_PORT=$TYPEORM_PORT >> .env
                echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
                echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
                echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
                ls -latr
                cat .env
                npm i
                npm install oauth-sign
                npm run migrations > migrationresult.txt

        - run:
            name: Send migration results to memstash
            command: |
                #!/bin/bash
                cd backend
                cat migrationresult.txt
                if [ $(grep -i "has been executed successfully" migrationresult.txt | wc -l) -ge 1 ]
                then 
                curl -H "Content-Type: text/plain" -H "token: ee7cabe0-f97f-4a0e-9507-89961a8b4c96" --request PUT --data "Migration Successful" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:8}
                curl -H "token: ee7cabe0-f97f-4a0e-9507-89961a8b4c96" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:8}
                else
                curl -H "Content-Type: text/plain" -H "token: ee7cabe0-f97f-4a0e-9507-89961a8b4c96" --request PUT --data "Migration Failed" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:8}
                curl -H "token: ee7cabe0-f97f-4a0e-9507-89961a8b4c96" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:8}
                fi
            # Here's where you will add some code to rollback on failure
        - destroy-environment



    deploy-frontend:
      docker:
        - image: python:3.9.1-alpine3.12
      steps:
        - checkout
        - run:
            name: Install everything
            command: |
              apk add --update curl nodejs npm tar
              pip install awscli
              cd frontend
              npm install
        - attach_workspace:
            at: ~/
        - run:
            name: Get backend url
            command: |
              export BACKEND_IP=$(sed -n 2p .circleci/ansible/inventory.txt)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "${API_URL}"
        - run:
            name: Build frontend
            command: |
              cd frontend
              npm run build
        - run:
            name: Deploy frontend objects
            command: |
              aws s3 cp --recursive frontend/dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:8}"
        # - revert-migrations
        - destroy-environment

deploy-backend:
        docker:
            - image: python:3.7-alpine3.11
            # Docker image here that supports Ansible
        steps:
            # Checkout code from git
            - checkout
            # Add ssh keys with fingerprint
            - add_ssh_keys:
                  fingerprints:
                      - "d1:1d:fe:4c:a7:92:72:1f:97:5f:8b:b0:07:db:f9:09"
            # attach workspace
            - attach_workspace:
                  at: ~/
            - run:
                  name: Install dependencies
                  command: |
                      apk add --update ansible openssh-client tar gzip
            - restore_cache:
                  keys:
                      - "backend-dist"
            - run:
                  name: Deploy backend
                  no_output_timeout: 30m
                  command: |
                      export ANSIBLE_HOST_KEY_CHECKING=False
                      ansible-playbook -i .circleci/ansible/inventory.txt \
                      .circleci/ansible/deploy-backend.yml
            - run:
                  name: if needed
                  when: on_fail
                  command: |
                      apk add --update py3-pip
                      pip install --upgrade pip
                      pip install awscli
            - destroy-environment



#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [deploy-infrastructure]
#       - smoke-test:
#           requires: [deploy-backend, deploy-frontend]
#       - cloudfront-update:
#           requires: [smoke-test]
#       - cleanup:
#           requires: [cloudfront-update]